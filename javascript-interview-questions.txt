1) What is var in javascript?
var keyword declares a variable in the current scope

// These are both globals
var foo = 1;
bar = 2;

function()
{
    var foo = 1; // Local
    bar = 2;     // Global
}
Local variables are always faster than the variables in global scope.
If you do not use var to declare a variable, the variable will be in global scope.

-------------------------------------

2)  What is global variable and how to access global variable and a variable within a function of same name?

using window.value we can access global variable

value=50;//global variable  
function a(){  
var value = 5;
alert(value);  
alert(window.value);
}  

-------------------------------------


3) What is the difference between undefined and not defined in JavaScript?

In JavaScript, if you try to use a variable that doesn't exist and has not been declared, then JavaScript will throw an error var name is not defined and script will stop executing. However, if you use typeof undeclared_variable, then it will return undefined.


-------------------------------------

4) What are the Datatypes in javascript?

Primitive and non-primitive data type

Primitive data are only single values.
String
Number
Boolean
Undefined
Null

Non-primitive data types are used to store the group of values.
Object
Array
RegExp

-------------------------------------

5) What happens if two functions having same in javascript?

The second function will be executed.

value=50;//global variable  
function a(){  
var value = 5;
alert(value);  
alert(window.value);
}  
function a(){  
alert(value);  
}  

a();

This will alert 50 alone.

-------------------------------------

6) How to create object in javascript?

Objects are variables too. But objects can contain many values.

The values are written as name : value pairs (name and value separated by a colon).
Example
var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"}; 

-------------------------------------

7) How to check if a variable is an object or not?

If typeof yourVariable === 'object', it's an object or null. If you want to exclude null, just make it yourVariable !== null && typeof yourVariable === 'object'.

-------------------------------------

8) What is the difference between declaring a number variable using var x = 123 and using new keyword var y = new Number(123)

Normally JavaScript numbers are primitive values created from literals: var x = 123

But numbers can also be defined as objects with the keyword new: var y = new Number(123)
Example
var x = 123;
var y = new Number(123);

// typeof x returns number
// typeof y returns object

Do not create Number objects. It slows down execution speed.

(Ask what it will return when we compare that using == and ===)

When using the == equality operator, equal numbers looks equal:
Example
var x = 500;             
var y = new Number(500);

// (x == y) is true because x and y have equal values

When using the === equality operator, equal numbers are not equal, because the === operator expects equality in both type and value.
Example
var x = 500;             
var y = new Number(500);

// (x === y) is false because x and y have different types

Or even worse. Objects cannot be compared:
Example
var x = new Number(500);             
var y = new Number(500);

// (x == y) is false because objects cannot be compared

JavaScript objects cannot be compared.

-------------------------------------

9) Types of error in javascript and error handling methods

http://www.tutorialspoint.com/javascript/javascript_error_handling.htm

-------------------------------------

10) Closure function

function makeFunc() {
  var name = "Mozilla";
  function displayName() {
    alert(name);
  }
  return displayName;
}

var myFunc = makeFunc();
myFunc();

the string "Mozilla" will be displayed in a JavaScript alert box. 
the displayName() inner function was returned from the outer function before being executed.

Normally, the local variables within a function only exist for the duration of that function's execution. Once makeFunc() has finished executing, it is reasonable to expect that the name variable will no longer be accessible. Since the code still works as expected, this is obviously not the case.

The solution to this puzzle is that myFunc has become a closure. A closure is a special kind of object that combines two things: a function, and the environment in which that function was created. The environment consists of any local variables that were in-scope at the time that the closure was created. In this case, myFunc is a closure that incorporates both the displayName function and the "Mozilla" string that existed when the closure was created.


Example
self-invoking functions

var add = (function () {
    var counter = 0;
    return function () {return counter += 1;}
})();

add();
 add();
 add();

// the counter is now 3 
 
------------------------------------

11) How to limit a field to accept only alphabets and space, no numbers and special characters

using regular expression
var regex = /^[a-zA-Z ]*$/;	
regex.test(value); //it will return true or false

------------------------------------

12) How to remove number from a string

questionText = questionText.replace(/[0-9]/g, '');

------------------------------------

13) Do you know OOPS concept? What is encapsulation?

------------------------------------

14) List each item in the array
<button onclick="numbers.forEach(myFunction)">Try it</button>
<p id="demo"></p>

<script>
demoP = document.getElementById("demo");
var numbers = [4, 9, 16, 25];

function myFunction(item, index) {
    demoP.innerHTML = demoP.innerHTML + "index[" + index + "]: " + item + "<br />"; 
}
</script>


The forEach() method calls a provided function once for each element in an array, in order.
Note: forEach() does not execute the function for array elements without values.
